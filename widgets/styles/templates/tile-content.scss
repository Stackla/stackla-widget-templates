@use "sass:math";
@use "sass:string";
@use "@styles/partials/media-queries";

// style placeholder
%tile-content-styles-ph {
  display: flex;

  .tile-content-wrapper {
    --max-lines: 7;

    display: flex;
    flex-direction: column;
    height: 100%;
    gap: 24px;
    width: 100%;

    .description {
      display: flex;
      flex-direction: column;
      overflow: hidden;
      flex: 1 1 auto;
      width: 100%;

      .caption {
        // intentional duplicate display props. When --webkit-box not supported, display with be flex
        display: flex;
        line-height: 1.2rem;
        overflow: hidden;
        flex: 1 1 auto;

        .caption-paragraph {
          display: flex;
          display: -webkit-box;
          -webkit-line-clamp: var(--lines);
          color: var(--text-tile-font-color);
          line-clamp: 7;
          -webkit-box-orient: vertical;
          font-size: var(--text-tile-font-size);
          font-weight: 300;
          line-height: 16px;
          -webkit-box-pack: end;
          height: fit-content;
          max-height: 80px;
          margin-bottom: 16px;
          text-overflow: ellipsis;
          overflow: hidden;
          overflow-y: scroll;
        }
      }
    }

    .user-info {
      display: flex;
      align-items: center;

      .user-link {
        display: flex;
        flex-direction: column;
        margin-right: auto;
        text-decoration: none;
        gap: 8px;

        .user-name {
          font-size: var(--text-tile-user-name-font-size);
          color: var(--text-tile-user-name-font-color);
        }

        .user-handle {
          font-size: var(--text-tile-user-handle-font-size);
          color: var(--text-tile-user-handle-font-color);
        }
      }

      .avatar-wrapper {
        margin-right: 16px;
        display: flex;

        .avatar-link {
          display: flex;

          > img {
            width: 40px;
            height: 40px;
            border-radius: 50%;
          }
        }
      }
    }

    .header {
      display: flex;
      flex-direction: row;
      width: 100%;

      share-menu {
        display: flex;
        margin-left: auto;
        margin-right: 10px;
        align-items: center;
      }

      time-phrase {
        display: flex;
        margin-left: auto;
        align-items: center;
      }

      .share-menu-timephrase-wrapper {
        display: flex;
        flex-direction: column;
        margin-left: auto;
        padding-top: 4px;
        padding-bottom: 2px;
        align-items: end;

        .share-menu-products-icon {
          display: flex;
          flex-direction: row;
          align-items: center;

          .icon-products {
            margin-right: 6px;
          }

          share-menu {
            display: flex;
            margin-left: auto;
            margin-right: 0;
            align-items: center;
          }
        }

        time-phrase {
          margin-top: auto;
        }
      }
    }

    &.light {
      .user-info {
        .user-link {
          color: #000;
        }
      }
    }

    &.dark {
      .caption .caption-paragraph {
        color: #fff;
      }

      .user-info {
        .user-link {
          color: #fff;

          .user-handle {
            color: #fff;
          }
        }
      }
    }

    &.dark-weight {
      .user-info {
        .user-link {
          color: #fff;
          font-weight: 600;

          .user-handle {
            color: #fff;
            font-weight: 400;
          }
        }
      }
    }

    &.custom {
      .user-info {
        .user-link {
          .user-name {
            color: var(--text-tile-user-name-font-color);
            font-weight: 600;
          }

          .user-handle {
            color: var(--text-tile-user-handle-font-color);
            font-weight: 400;
          }
        }
      }
    }
  }

  &[orientation="vertical"] {
    .tile-content-wrapper .user-info {
      flex-direction: column;
      gap: 10px;

      .avatar-wrapper,
      .user-link {
        margin-right: unset;
      }
    }
  }
}

@mixin tile-content-styles($parent: null) {
  // if parent selector is supplied use it
  @if $parent {
    #{string.unquote($parent) tile-content} {
      @extend %tile-content-styles-ph;
    }
  } @else {
    // dynamically determine the parent selector if available
    #{if(&, "& tile-content", "tile-content")} {
      @extend %tile-content-styles-ph;
    }
  }
  @content;
}
